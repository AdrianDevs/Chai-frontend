/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as SignupImport } from './routes/signup';
import { Route as LoginImport } from './routes/login';
import { Route as AboutImport } from './routes/about';
import { Route as AuthImport } from './routes/_auth';
import { Route as IndexImport } from './routes/index';
import { Route as AuthProfileImport } from './routes/_auth.profile';
import { Route as AuthConversationsImport } from './routes/_auth.conversations';
import { Route as AuthConversationsIndexImport } from './routes/_auth.conversations.index';
import { Route as AuthConversationsNewImport } from './routes/_auth.conversations.new';
import { Route as AuthConversationsConversationIdImport } from './routes/_auth.conversations.$conversationId';
import { Route as AuthConversationsConversationIdUsersNewImport } from './routes/_auth.conversations.$conversationId.users.new';

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any);

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any);

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any);

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const AuthProfileRoute = AuthProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthRoute,
} as any);

const AuthConversationsRoute = AuthConversationsImport.update({
  id: '/conversations',
  path: '/conversations',
  getParentRoute: () => AuthRoute,
} as any);

const AuthConversationsIndexRoute = AuthConversationsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthConversationsRoute,
} as any);

const AuthConversationsNewRoute = AuthConversationsNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AuthConversationsRoute,
} as any);

const AuthConversationsConversationIdRoute =
  AuthConversationsConversationIdImport.update({
    id: '/$conversationId',
    path: '/$conversationId',
    getParentRoute: () => AuthConversationsRoute,
  } as any);

const AuthConversationsConversationIdUsersNewRoute =
  AuthConversationsConversationIdUsersNewImport.update({
    id: '/users/new',
    path: '/users/new',
    getParentRoute: () => AuthConversationsConversationIdRoute,
  } as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_auth': {
      id: '/_auth';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthImport;
      parentRoute: typeof rootRoute;
    };
    '/about': {
      id: '/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AboutImport;
      parentRoute: typeof rootRoute;
    };
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginImport;
      parentRoute: typeof rootRoute;
    };
    '/signup': {
      id: '/signup';
      path: '/signup';
      fullPath: '/signup';
      preLoaderRoute: typeof SignupImport;
      parentRoute: typeof rootRoute;
    };
    '/_auth/conversations': {
      id: '/_auth/conversations';
      path: '/conversations';
      fullPath: '/conversations';
      preLoaderRoute: typeof AuthConversationsImport;
      parentRoute: typeof AuthImport;
    };
    '/_auth/profile': {
      id: '/_auth/profile';
      path: '/profile';
      fullPath: '/profile';
      preLoaderRoute: typeof AuthProfileImport;
      parentRoute: typeof AuthImport;
    };
    '/_auth/conversations/$conversationId': {
      id: '/_auth/conversations/$conversationId';
      path: '/$conversationId';
      fullPath: '/conversations/$conversationId';
      preLoaderRoute: typeof AuthConversationsConversationIdImport;
      parentRoute: typeof AuthConversationsImport;
    };
    '/_auth/conversations/new': {
      id: '/_auth/conversations/new';
      path: '/new';
      fullPath: '/conversations/new';
      preLoaderRoute: typeof AuthConversationsNewImport;
      parentRoute: typeof AuthConversationsImport;
    };
    '/_auth/conversations/': {
      id: '/_auth/conversations/';
      path: '/';
      fullPath: '/conversations/';
      preLoaderRoute: typeof AuthConversationsIndexImport;
      parentRoute: typeof AuthConversationsImport;
    };
    '/_auth/conversations/$conversationId/users/new': {
      id: '/_auth/conversations/$conversationId/users/new';
      path: '/users/new';
      fullPath: '/conversations/$conversationId/users/new';
      preLoaderRoute: typeof AuthConversationsConversationIdUsersNewImport;
      parentRoute: typeof AuthConversationsConversationIdImport;
    };
  }
}

// Create and export the route tree

interface AuthConversationsConversationIdRouteChildren {
  AuthConversationsConversationIdUsersNewRoute: typeof AuthConversationsConversationIdUsersNewRoute;
}

const AuthConversationsConversationIdRouteChildren: AuthConversationsConversationIdRouteChildren =
  {
    AuthConversationsConversationIdUsersNewRoute:
      AuthConversationsConversationIdUsersNewRoute,
  };

const AuthConversationsConversationIdRouteWithChildren =
  AuthConversationsConversationIdRoute._addFileChildren(
    AuthConversationsConversationIdRouteChildren
  );

interface AuthConversationsRouteChildren {
  AuthConversationsConversationIdRoute: typeof AuthConversationsConversationIdRouteWithChildren;
  AuthConversationsNewRoute: typeof AuthConversationsNewRoute;
  AuthConversationsIndexRoute: typeof AuthConversationsIndexRoute;
}

const AuthConversationsRouteChildren: AuthConversationsRouteChildren = {
  AuthConversationsConversationIdRoute:
    AuthConversationsConversationIdRouteWithChildren,
  AuthConversationsNewRoute: AuthConversationsNewRoute,
  AuthConversationsIndexRoute: AuthConversationsIndexRoute,
};

const AuthConversationsRouteWithChildren =
  AuthConversationsRoute._addFileChildren(AuthConversationsRouteChildren);

interface AuthRouteChildren {
  AuthConversationsRoute: typeof AuthConversationsRouteWithChildren;
  AuthProfileRoute: typeof AuthProfileRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthConversationsRoute: AuthConversationsRouteWithChildren,
  AuthProfileRoute: AuthProfileRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '': typeof AuthRouteWithChildren;
  '/about': typeof AboutRoute;
  '/login': typeof LoginRoute;
  '/signup': typeof SignupRoute;
  '/conversations': typeof AuthConversationsRouteWithChildren;
  '/profile': typeof AuthProfileRoute;
  '/conversations/$conversationId': typeof AuthConversationsConversationIdRouteWithChildren;
  '/conversations/new': typeof AuthConversationsNewRoute;
  '/conversations/': typeof AuthConversationsIndexRoute;
  '/conversations/$conversationId/users/new': typeof AuthConversationsConversationIdUsersNewRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '': typeof AuthRouteWithChildren;
  '/about': typeof AboutRoute;
  '/login': typeof LoginRoute;
  '/signup': typeof SignupRoute;
  '/profile': typeof AuthProfileRoute;
  '/conversations/$conversationId': typeof AuthConversationsConversationIdRouteWithChildren;
  '/conversations/new': typeof AuthConversationsNewRoute;
  '/conversations': typeof AuthConversationsIndexRoute;
  '/conversations/$conversationId/users/new': typeof AuthConversationsConversationIdUsersNewRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/_auth': typeof AuthRouteWithChildren;
  '/about': typeof AboutRoute;
  '/login': typeof LoginRoute;
  '/signup': typeof SignupRoute;
  '/_auth/conversations': typeof AuthConversationsRouteWithChildren;
  '/_auth/profile': typeof AuthProfileRoute;
  '/_auth/conversations/$conversationId': typeof AuthConversationsConversationIdRouteWithChildren;
  '/_auth/conversations/new': typeof AuthConversationsNewRoute;
  '/_auth/conversations/': typeof AuthConversationsIndexRoute;
  '/_auth/conversations/$conversationId/users/new': typeof AuthConversationsConversationIdUsersNewRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/signup'
    | '/conversations'
    | '/profile'
    | '/conversations/$conversationId'
    | '/conversations/new'
    | '/conversations/'
    | '/conversations/$conversationId/users/new';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/signup'
    | '/profile'
    | '/conversations/$conversationId'
    | '/conversations/new'
    | '/conversations'
    | '/conversations/$conversationId/users/new';
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/about'
    | '/login'
    | '/signup'
    | '/_auth/conversations'
    | '/_auth/profile'
    | '/_auth/conversations/$conversationId'
    | '/_auth/conversations/new'
    | '/_auth/conversations/'
    | '/_auth/conversations/$conversationId/users/new';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AuthRoute: typeof AuthRouteWithChildren;
  AboutRoute: typeof AboutRoute;
  LoginRoute: typeof LoginRoute;
  SignupRoute: typeof SignupRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/about",
        "/login",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/conversations",
        "/_auth/profile"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_auth/conversations": {
      "filePath": "_auth.conversations.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/conversations/$conversationId",
        "/_auth/conversations/new",
        "/_auth/conversations/"
      ]
    },
    "/_auth/profile": {
      "filePath": "_auth.profile.tsx",
      "parent": "/_auth"
    },
    "/_auth/conversations/$conversationId": {
      "filePath": "_auth.conversations.$conversationId.tsx",
      "parent": "/_auth/conversations",
      "children": [
        "/_auth/conversations/$conversationId/users/new"
      ]
    },
    "/_auth/conversations/new": {
      "filePath": "_auth.conversations.new.tsx",
      "parent": "/_auth/conversations"
    },
    "/_auth/conversations/": {
      "filePath": "_auth.conversations.index.tsx",
      "parent": "/_auth/conversations"
    },
    "/_auth/conversations/$conversationId/users/new": {
      "filePath": "_auth.conversations.$conversationId.users.new.tsx",
      "parent": "/_auth/conversations/$conversationId"
    }
  }
}
ROUTE_MANIFEST_END */
